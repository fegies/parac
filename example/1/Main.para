module Main(foobaen,ue);

import Io (println) as Foo; //some comment

/*
Typeclasses are basically traits
*/

import Int;



data Complex (Ring a => a) {
	x : a,
	y : a
}

data Box( a ) {
	content : a
}

enum Maybe( a ) {
	just : a,
	nothing : ()
}

class Functor ( a ) {
	fmap( a1 : a(b), f : (b->c) ) : a(c)  
}


instance Functor( Box(a) ) {
	fmap( a, f ) {
		a.f();
	}
}

instance Functor( Maybe(a) ) {
	fmap( a, f ) {
		switch( a ) {
			just(a) -> a.f().just(),
			nothing -> nothing
		};
	}
}


main( args )  {
	var n1 : Complex = {
		x : 0++,
		y : -42 //this will automatically resolve the type constraint of Ring in Complex to Int
	};
	5 * 5 % 3 / 1;
	5.add(6).add(3).add(60,e.call());
	var n2 = Complex( 5, 2);
	
	var e = En.nu( n2 );
	
	(n1 - n2).print();
	
	switch e {
		str(a) -> a.print(),
		nu(n) -> n.print()
	};
} 



/*
instance Ring( Complex a => a ) {
	(+)(a, b) {
		{
			x : a.x + b.x
			y : a.y + b.y
		}
	},
	neg(a) {
		{
			x : neg(a.x)
			y : a.y.neg()
		}
	}
	(*)(a,b) {
		return {
			x : a.x * b.x - a.y * b.y,
			y : a.x * a.y + a.y * b.x
		}
	}
}
instance ToString( Complex a ){}



*/
